library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache.extra = rand_seed)
require("mvtnorm")
library(dplyr)
library(ggplot2)
#---
## Initial Parameters
#---
set.seed(3654)
# Sim pars ----
burn.in = 0
sim.iters = 1
# Map pars ----
map.cols = 40
map.rows = 40
npix = map.rows * map.cols # should be a square
# ARMA pars ----
rhos = c(0.6, 0.2)# AR parameter(s): must sum to less than 1
thetas = c(.4) # MA parameter: must be less than 1
# Temporal pars ----
ntime = 30 # number of time points
# varcov pars ----
cormod = "stable" # 'stable' correlation model: varcov = nug+sill*exp(-(d/scale)^shape)
dist.meth = "Eucl" # Euclidean distance
sill = 1 # sill (variance)
r = .25 # range of spatial autocor, relative to width of map (scale parameter)
a = 1 # shape of spatial autocor function (shape parameter)
nug = .2 # fixed nugget
# spatial nugget pars ----
nug.cormod = "matern"
nug.distmeth = "Eucl"
nug.r = .2
nug.s = 20
constrain.nug = c(0, 1) # constrain the spatial nugget to these values
# effect parameters ----
beta = .2 # spatial predictors
phi = .2 # spatio-temporal predictors
gamma = .5 # time trends
# Additinal parameter calculations ----
## Assign coordinates to pixels
coords = as.matrix(expand.grid(x = as.double(1:map.cols),
y = as.double(1:map.rows)))
## spatial correlation
psill = sill - nug # partial sill: if nug is spatially variable, use mean(nug)
range = r * map.cols # range in pixels
## spatially variable parameters
nug.range = nug.r * map.cols
nug.smooth = nug.s
# Sanity checks ----
stopifnot(sum(rhos) < 1)
stopifnot(nrow(coords) == npix)
# parameter table ----
fixed.pars = expand.grid(range = range, a = a, nug = nug, fixed.pars = TRUE)
corpars = list(scale = range, power = a, # parameter list for Covmatrix()
sill = psill, nugget = nug, mean = 0)
nugpars = list(scale = nug.range, smooth = nug.smooth,
mean = 0, sill = 1, nugget = 0)
start.time = Sys.time()
# Calculate varcov matrix (Sigma) ----
## Covmatrix() - easier to modify specs
covmat = CompRandFld::Covmatrix(coordx = coords,
distance = dist.meth,
corrmodel = cormod,
param = corpars)$covmatrix
# invcholV = remotePARTS::invert_chol(covmat)
# ## Tony's
# d = as.matrix(stats::dist(coords, method = "euc"))
# d.scale = (d - min(d)) / (max(d) - min(d)) # rescale to (0, 1)
# covmat2 = diag(rep(nug, npix)) + (1 - nug) * exp(-(d/r)^a)
# invcholV2 = remotePARTS::invert_chol(covmat2)
# ## Same answer?
# all((covmat2 - covmat) == 0) # TRUE! - also no speed change
image(covmat)
## Wendland tapering function
Wendl <- function(h, theta = 0.2){
w = ifelse(test = abs(h) < theta,
yes = 0,
no = (1 - (abs(h)/theta))^4 * (1 + (4*(abs(h)/theta))))
return(w)
}
prop.zero = .8
wend.range = quantile(covmat, probs = prop.zero) # 25% of cells should be zero
## Spherical tapering function
taper.sphr <- function(d, theta, type = "dist") {
if(type == "dist"){
ts = ifelse(d > theta,
0,
((1 - d/theta)^2) * (1 + d/(2 * theta))
)
}
if(type == "var"){
ts = ifelse(d < theta,
0,
((1 - d/theta)^2) * (1 + d/(2 * theta)))
}
return(ts)
}
d = as.matrix(dist(as.matrix(coords)))
tap.theta = quantile(d, 1-prop.zero)# 25% of cells should be zero
sum(taper.sphr(d, tap.theta) == 0)/length(d)
image(Wendl(covmat, wend.range))
wend.range
image(taper.sphr(covmat, wend.range, type = "var"))
# image(taper.sphr(d, tap.theta))
image(taper.sphr(covmat, wend.range/2, type = "var"))
image(taper.sphr(covmat, 5, type = "var"))
image(taper.sphr(covmat, 10/5, type = "var"))
wend.range
image(taper.sphr(covmat, 0.25, type = "var"))
taper.sphr(covmat, 0.25, type = "var")[1:20, 20]
taper.sphr(covmat, 0.25, type = "var")[1:20, 1:20]
image(taper.sphr(covmat, 0.25, type = "var"))
image(taper.sphr(d, 0.25, type = "dist"))
image(taper.sphr(d, 0.25*npix, type = "dist"))
image(taper.sphr(d, 0.25*map.cols, type = "dist"))
d
d[1:5, 1:5]
coords
plot(coods[, 1], coords[,2])
plot(coords[, 1], coords[, 2])
d = dist(as.matrix(coords))
d[1:5, 1:5]
as.matrix(d)[1:5, 1:5]
as.matrix(d)
as.matrix(d)[1:100, 1:100]
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache.extra = rand_seed)
require("mvtnorm")
library(dplyr)
library(ggplot2)
#---
## Initial Parameters
#---
set.seed(3654)
# Sim pars ----
burn.in = 0
sim.iters = 1
# Map pars ----
map.cols = 4
map.rows = 4
npix = map.rows * map.cols # should be a square
# ARMA pars ----
rhos = c(0.6, 0.2)# AR parameter(s): must sum to less than 1
thetas = c(.4) # MA parameter: must be less than 1
# Temporal pars ----
ntime = 30 # number of time points
# varcov pars ----
cormod = "stable" # 'stable' correlation model: varcov = nug+sill*exp(-(d/scale)^shape)
dist.meth = "Eucl" # Euclidean distance
sill = 1 # sill (variance)
r = .25 # range of spatial autocor, relative to width of map (scale parameter)
a = 1 # shape of spatial autocor function (shape parameter)
nug = .2 # fixed nugget
# spatial nugget pars ----
nug.cormod = "matern"
nug.distmeth = "Eucl"
nug.r = .2
nug.s = 20
constrain.nug = c(0, 1) # constrain the spatial nugget to these values
# effect parameters ----
beta = .2 # spatial predictors
phi = .2 # spatio-temporal predictors
gamma = .5 # time trends
# Additinal parameter calculations ----
## Assign coordinates to pixels
coords = as.matrix(expand.grid(x = as.double(1:map.cols),
y = as.double(1:map.rows)))
## spatial correlation
psill = sill - nug # partial sill: if nug is spatially variable, use mean(nug)
range = r * map.cols # range in pixels
## spatially variable parameters
nug.range = nug.r * map.cols
nug.smooth = nug.s
# Sanity checks ----
stopifnot(sum(rhos) < 1)
stopifnot(nrow(coords) == npix)
# parameter table ----
fixed.pars = expand.grid(range = range, a = a, nug = nug, fixed.pars = TRUE)
corpars = list(scale = range, power = a, # parameter list for Covmatrix()
sill = psill, nugget = nug, mean = 0)
nugpars = list(scale = nug.range, smooth = nug.smooth,
mean = 0, sill = 1, nugget = 0)
start.time = Sys.time()
# Calculate varcov matrix (Sigma) ----
## Covmatrix() - easier to modify specs
covmat = CompRandFld::Covmatrix(coordx = coords,
distance = dist.meth,
corrmodel = cormod,
param = corpars)$covmatrix
# invcholV = remotePARTS::invert_chol(covmat)
# ## Tony's
# d = as.matrix(stats::dist(coords, method = "euc"))
# d.scale = (d - min(d)) / (max(d) - min(d)) # rescale to (0, 1)
# covmat2 = diag(rep(nug, npix)) + (1 - nug) * exp(-(d/r)^a)
# invcholV2 = remotePARTS::invert_chol(covmat2)
# ## Same answer?
# all((covmat2 - covmat) == 0) # TRUE! - also no speed change
image(covmat)
## Wendland tapering function
Wendl <- function(h, theta = 0.2){
w = ifelse(test = abs(h) < theta,
yes = 0,
no = (1 - (abs(h)/theta))^4 * (1 + (4*(abs(h)/theta))))
return(w)
}
prop.zero = .8
wend.range = quantile(covmat, probs = prop.zero) # 25% of cells should be zero
## Spherical tapering function
taper.sphr <- function(d, theta, type = "dist") {
if(type == "dist"){
ts = ifelse(d > theta,
0,
((1 - d/theta)^2) * (1 + d/(2 * theta))
)
}
if(type == "var"){
ts = ifelse(d < theta,
0,
((1 - d/theta)^2) * (1 + d/(2 * theta)))
}
return(ts)
}
d = as.matrix(dist(as.matrix(coords)))
tap.theta = quantile(d, 1-prop.zero)# 25% of cells should be zero
sum(taper.sphr(d, tap.theta) == 0)/length(d)
image(Wendl(covmat, wend.range))
image(taper.sphr(covmat, 0.25, type = "var"))
taper.sphr(covmat, 0.25, type = "var")[1:20, 1:20]
image(taper.sphr(d, 0.25*map.cols, type = "dist"))
image(taper.sphr(d, .8*map.cols, type = "dist"))
image((exp(-d/.5)))
image((exp(-d/.8)))
image(taper.sphr(covmat, 0.25, type = "var"))
image((exp(-d/.8)))
image((exp(-d/.9)))
image((exp(-d/2)))
image((exp(-d/5)))
image((exp(-d/10)))
remotePARTS::check_posdef(taper.sphr(covmat, 0.25, type = "var"))
taper.sphr(covmat, 0.25, type = "var")
